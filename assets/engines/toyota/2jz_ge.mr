import "engine_sim.mr"
import "../../part-library/part_library.mr"
impulse_response_library ir_lib()


units units()
constants constants()
label rot360(360 * units.deg)
label cycle(2 * rot360)
label rot120(cycle / 6)
label rpmlimit(8000 * units.rpm)


private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node stock_y7_intake_lobe_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 194 * units.deg,
            gamma: 0.8,
            lift: 333 * units.thou,
            steps: 100
        );
}

public node stock_y7_exhaust_lobe_profile {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 196 * units.deg,
            gamma: 0.8,
            lift: 200 * units.thou,
            steps: 100
        );
}

public node jz_camshaft_builder {
    input lobe_profile: stock_y7_intake_lobe_profile();
	input ex_lobe_profile: stock_y7_exhaust_lobe_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: 0 * units.deg;
    input exhaust_lobe_center: 225 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 0.3 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)


    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)
    

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 2 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 5 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 1 * rot120)
		.add_lobe(rot360 + intake_lobe_center + 3 * rot120)

	_exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
		.add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.thou, k_28inH2O(flow))
}

public node jz_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 100.0 * units.cc;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0, 0)
        .add_flow_sample(50, 25)
        .add_flow_sample(100, 76)
        .add_flow_sample(150, 100)
        .add_flow_sample(200, 146)
        .add_flow_sample(250, 175)
        .add_flow_sample(300, 212)
        .add_flow_sample(350, 230)
        .add_flow_sample(400, 255)
        .add_flow_sample(450, 275)
        .add_flow_sample(500, 294)
        .add_flow_sample(550, 300)
        .add_flow_sample(600, 314)
        .add_flow_sample(650, 314)
        .add_flow_sample(700, 314)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0, 0)
        .add_flow_sample(50, 25)
        .add_flow_sample(100, 70)
        .add_flow_sample(150, 100)
        .add_flow_sample(200, 132)
        .add_flow_sample(250, 140)
        .add_flow_sample(300, 156)
        .add_flow_sample(350, 170)
        .add_flow_sample(400, 181)
        .add_flow_sample(450, 191)
        .add_flow_sample(500, 207)
        .add_flow_sample(550, 214)
        .add_flow_sample(600, 228)
        .add_flow_sample(650, 228)
        .add_flow_sample(700, 228)

    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 275.0 * units.cc,
        intake_runner_cross_section_area: 9.6123 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node jz_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8500 * units.rpm;
    input limiter_duration: 0.05;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0/6) * cycle - 180 * units.deg)
            .connect_wire(wires.wire5, (1/6) * cycle - 80 * units.deg)
            .connect_wire(wires.wire3, (2/6) * cycle - 670 * units.deg)
            .connect_wire(wires.wire6, (3/6) * cycle - 530 * units.deg)
            .connect_wire(wires.wire2, (4/6) * cycle - 420 * units.deg)
            .connect_wire(wires.wire4, (5/6) * cycle - 300 * units.deg);
}

public node jz_intake {
    input carburetor_cfm: 650.0;
    input idle_flow_rate_cfm: 1.0;
    input idle_throttle_plate_position: 0.975;
    input throttle_gamma: 2.0;

    alias output __out: intake;

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: 100.0 * units.cm2,
        intake_flow_rate: k_carb(carburetor_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        throttle_gamma: throttle_gamma,
        runner_flow_rate: k_carb(300.0),
        runner_length: 6.0 * units.inch,
        velocity_decay: 1.0
    )
}

public node jz {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Toyota 2JZ-GE",
        starter_torque: 200 * units.lb_ft,
        starter_speed: 250 * units.rpm,
        redline: rpmlimit,
	fuel: fuel(
            max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.5,
            max_burning_efficiency: 0.85)
    )

    crankshaft c0(
        throw: 1.695 * units.inch,
        flywheel_mass: 13.47 * units.lb,
        mass: 30 * units.lb,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.5,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 330  * units.deg
    )

    rod_journal rj0(angle: 0 * units.deg)
    rod_journal rj1(angle: 120 * units.deg)
    rod_journal rj2(angle: 240 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 120 * units.deg)
    rod_journal rj5(angle: 0 * units.deg)
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: 565 * units.g,
        blowby: 0,
        compression_height: 30 * units.mm,
        wrist_pin_position: -1.0 * units.mm,
        displacement: -7.4 * units.cc
    )

    connecting_rod_parameters cr_params(
        mass: 508 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 142 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 86 * units.mm,
        deck_height: 8.65 * units.inch
    )

    jz_intake intake(
        carburetor_cfm: 650.0,
        idle_flow_rate_cfm: 0.008,
        idle_throttle_plate_position: 0.9789,
        throttle_gamma: 1.5
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1000.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0, //0.5
        volume: 50.0 * units.L
    )

    impulse_response ir0(filename: "../../sound-library/smooth/smooth_39.wav", volume: 0)
    impulse_response ir1(filename: "../../sound-library/smooth/smooth_39.wav", volume: 0)

    exhaust_system exhaust0(es_params, audio_volume: 0.5, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: 0 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4
        )
    	.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe lobe(
        duration_at_50_thou: 200 * units.deg,
        gamma: 0.4,
        lift: 500 * units.thou,
        steps: 100
    )
	harmonic_cam_lobe lobe2(
        duration_at_50_thou: 210 * units.deg,
        gamma: 0.4,
        lift: 500 * units.thou,
        steps: 100
    )

    jz_camshaft_builder camshaft(
        lobe_profile: lobe,
		ex_lobe_profile: lobe2,
        lobe_separation: 110 * units.deg,
        base_radius: 600 * units.thou
    )

    b0.set_cylinder_head (
        jz_head(
            chamber_volume: 34.6 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 10 * units.deg)
        .add_sample(1000 * units.rpm, 14 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 30 * units.deg)
        .add_sample(5000 * units.rpm, 30 * units.deg)
        .add_sample(6000 * units.rpm, 32 * units.deg)
        .add_sample(7000 * units.rpm, 40 * units.deg)


    engine.add_ignition_module(
        jz_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: rpmlimit
        ))
} 