import "engine_sim.mr"								   

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

label cycle90(90 * units.deg)
label cycle68(68 * units.deg)
label cycle76(76 * units.deg)
label cycle144(144 * units.deg)
label cycle54(54 * units.deg)
label cycle45(45 * units.deg)
label cycle180(180 * units.deg)

public node lamborghini_5_2_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 8250 * units.rpm;
	input limiter_duration: 0.03;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, 0)
            .connect_wire(wires.wire6, cycle90)
            .connect_wire(wires.wire5, 1 * cycle144)
            .connect_wire(wires.wire10, 1 * cycle144 + cycle90)
            .connect_wire(wires.wire2, 2 * cycle144)
            .connect_wire(wires.wire7, 2 * cycle144 + cycle90)
            .connect_wire(wires.wire3, 3 * cycle144)
            .connect_wire(wires.wire8, 3 * cycle144 + cycle90)
            .connect_wire(wires.wire4, 4 * cycle144)
            .connect_wire(wires.wire9, 4 * cycle144 + cycle90);
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
	output wire9: ignition_wire();
	output wire10: ignition_wire();
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

public node lamborghini_5_2_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 198 * units.deg,
            gamma: 1.5,
            lift: 17.6 * units.mm,
            steps: 100
        );
}

public node lamborghini_5_2_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 198 * units.deg,
            gamma: 1.5,
            lift: 17.6 * units.mm,
            steps: 100
        );
}

public node lamborghini_5_2_camshaft_builder {
    input lobe_profile: lamborghini_5_2_lobe_profile_int();
	input ex_lobe_profile: lamborghini_5_2_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 120.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: -15.0 * units.deg;
    input base_radius: 1.0 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

	label rot90(90 * units.deg)
	label rot144(144 * units.deg)
    label rot360(360 * units.deg)
	label cycle(2 * 360 * units.deg)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center - 0.07)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot144 - 0.07)
		.add_lobe(rot360 - exhaust_lobe_center + 3 * rot144 + 0.05)
		.add_lobe(rot360 - exhaust_lobe_center + 4 * rot144 - 0.07)
		.add_lobe(rot360 - exhaust_lobe_center + 1 * rot144 - 0.07)
		
    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot90 - 0.07)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot144 + rot90 - 0.07)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot144 + rot90 - 0.07)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot144 + rot90 + 0.05)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot144 + rot90 - 0.07)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot144 + 0.05)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot144 + 0.05)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot144 + 0.05)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot144 + 0.05)
		
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 1 * rot90 + 0.05)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot144 + rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot144 + rot90 + 0.05)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot144 + rot90 + 0.05)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot144 + rot90 + 0.05)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node lamborghini_5_2_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 41.632 * units.cc;
    input flip_display: false;
	
	input flow_attenuation: 1.0;
    input lift_scale: 0.8;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 35 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 175 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 200 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 215 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 230 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 300 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 345 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 35 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 85 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 105 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 120 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 140 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 155 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 200 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 215 * flow_attenuation)

		
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: 500.0 * units.cc,
        intake_runner_cross_section_area: 2 * 12.4087 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node lamborghini_5_2 {
    alias output __out: engine;

    engine engine(
        name: "Lamborghini 5.2 V10 LP-640-4",
        starter_torque: 200 * units.Nm,
        starter_speed: 500 * units.rpm,
        redline: 8250 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0
        )
    )

    wires wires()

    crankshaft c0(
        throw: 92.8 * units.mm / 2,
        flywheel_mass: 10 * 2 * units.Nm,
        mass: 2 * units.kg,
        friction_torque: 13.5 * units.Nm,
        moment_of_inertia: 0.22986844776863666 * 2,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 3.0*constants.pi / 4.0 
	)

	rod_journal rj0(angle: 0)
	rod_journal rj2(angle: 2 * cycle144)
    rod_journal rj4(angle: 3 * cycle144)
	rod_journal rj6(angle: 4 * cycle144)
	rod_journal rj8(angle: 1 * cycle144)
	
    c0
		.add_rod_journal(rj0)
		.add_rod_journal(rj2)
        .add_rod_journal(rj4)
		.add_rod_journal(rj6)
		.add_rod_journal(rj8)

    piston_parameters piston_params(
        mass: 200 * units.g,
        compression_height: 31.82 * units.mm,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 300.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 135.0 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 84.5 * units.mm,
        deck_height: (135.0 + 31.82) * units.mm + 92.8 * units.mm / 2.0
    )

    performer_rpm_intake intake(
        carburetor_cfm: 2000.0,
        idle_flow_rate_cfm: 0.1,
        idle_throttle_plate_position: 0.963,
        throttle_gamma: 2.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(1000.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0,
        volume: 50.0 * units.L
    )
	
	exhaust_system_parameters es_params2(
        outlet_flow_rate: k_carb(1000.0),
        primary_tube_length: 20.0 * units.inch,
        primary_flow_rate: k_carb(300.0),
        velocity_decay: 1.0,
        volume: 50.0 * units.L
    )

    exhaust_system exhaust0(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)
 
    cylinder_bank b0(bank_params, angle: 45 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj8,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5
        )

    cylinder_bank b1(bank_params, angle: -45.0 * units.deg)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire7
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire8
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire9
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj8,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire10
        )

    engine
		.add_cylinder_bank(b1)
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe lobe(
        duration_at_50_thou: 256 * units.deg,
        gamma: 1.1,
        lift: 10.2 * units.mm,
        steps: 100
    )

    lamborghini_5_2_camshaft_builder camshaft(
	    lobe_profile: lamborghini_5_2_lobe_profile_int(),
		ex_lobe_profile: lamborghini_5_2_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        lamborghini_5_2_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
	b1.set_cylinder_head (
        lamborghini_5_2_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )
    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 10 * units.deg)
        .add_sample(1000 * units.rpm, 25 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 45 * units.deg)
        .add_sample(4000 * units.rpm, 45 * units.deg)
        .add_sample(5000 * units.rpm, 55 * units.deg)
        .add_sample(6000 * units.rpm, 60 * units.deg)
        .add_sample(7000 * units.rpm, 70 * units.deg)
		.add_sample(8000 * units.rpm, 75 * units.deg)

    engine.add_ignition_module(
        lamborghini_5_2_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 8250 * units.rpm,
			limiter_duration: 0.03
        ))
}