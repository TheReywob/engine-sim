import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

public node porsche_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6700 * units.rpm;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit)
            .connect_wire(wires.wire1, 0 * units.deg)   //    //0
            .connect_wire(wires.wire6, 120 * units.deg)  //   //120
            .connect_wire(wires.wire2, 120 * units.deg)  //   //120  //180
			.connect_wire(wires.wire4, 180 * units.deg)   //   //180
			.connect_wire(wires.wire3, 240 * units.deg)   //    //240
            .connect_wire(wires.wire5, 360 * units.deg);  //	//360  //-360
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
	output wire5: ignition_wire();
	output wire6: ignition_wire();
}

private node add_sym_sample {
    input angle;
    input lift;
    input this;
    alias output __out: this;

    this.add_sample(angle * units.deg, lift * units.thou)
    this.add_sample(-angle * units.deg, lift * units.thou)
}

public node porsche_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 288 * units.deg,  
            gamma: 2,
            lift: 13.2 * units.mm,      
            steps: 100
        );
}

public node porsche_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 280 * units.deg,   
            gamma: 2,
            lift: 13.2 * units.mm,       
            steps: 100
        );
}

public node porsche_camshaft_builder {
    input lobe_profile: porsche_lobe_profile_int();
	input ex_lobe_profile: porsche_lobe_profile_exh();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: 110.0 * units.deg;
    input advance: 0 * units.deg;
    input base_radius: 0.6 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
	output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
	camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)
	
    label rot60(60 * units.deg)
    label rot90(90 * units.deg)
    label rot120(120 * units.deg)
    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    _intake_cam_0
		.add_lobe(rot360 + intake_lobe_center)
		.add_lobe(rot360 + intake_lobe_center + 2 * rot60)
		.add_lobe(rot360 + intake_lobe_center + 4 * rot60)

	_exhaust_cam_0
		.add_lobe((rot360 - exhaust_lobe_center))
		.add_lobe((rot360 - exhaust_lobe_center) + 2 * rot60)
		.add_lobe((rot360 - exhaust_lobe_center) + 4 * rot60)
		
	_intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 3 * rot60)
		.add_lobe(rot360 + intake_lobe_center + 5 * rot60)
		.add_lobe(rot360 + intake_lobe_center + 1 * rot60)

	_exhaust_cam_1
        .add_lobe((rot360 - exhaust_lobe_center) + 3 * rot60)
		.add_lobe((rot360 - exhaust_lobe_center) + 5 * rot60)
		.add_lobe((rot360 - exhaust_lobe_center) + 1 * rot60)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node m64_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 90.0 * units.cc;
	input intake_runner_volume: 200.0 * units.cc;
    input intake_runner_cross_section_area: 15.0 * units.cm2;
    input exhaust_runner_volume: 200.0 * units.cc;
    input exhaust_runner_cross_section_area: 15.0 * units.cm2;
    input flip_display: false;

	input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 40 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 100 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 128 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 166 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 198 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 244 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 254 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 265 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 274 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 290 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 293 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 305 * flow_attenuation)
		.add_flow_sample(13 * lift_scale, 309 * flow_attenuation)
		.add_flow_sample(14 * lift_scale, 311 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 42 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 120 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 174 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 188 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 197 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 223 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 238 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 252 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 267 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 273 * flow_attenuation)
		.add_flow_sample(13 * lift_scale, 281 * flow_attenuation)
		.add_flow_sample(14 * lift_scale, 285 * flow_attenuation)


    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node m64 {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "Porsche M64 3.6l 12V",
        starter_torque: 200 * units.lb_ft,
		starter_speed: 900 * units.rpm,
        redline: 6700 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 4.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.95)
    )

    crankshaft c0(
        throw: 0.5 * 76.4 * units.mm,
        flywheel_mass: 5 * units.kg,
        mass: 13 * units.kg,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.9,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 30 * units.deg
    )

    rod_journal rj0(angle: 180 * units.deg)
	rod_journal rj1(angle: 300 * units.deg)
	rod_journal rj2(angle: 60 * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)

    piston_parameters piston_params(
        mass: 602 * units.g,
        blowby: 0,
        compression_height: 31.8 * units.mm,
        wrist_pin_position: 0 * units.mm,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 520.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 127 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 100 * units.mm,
        deck_height: 190 * units.mm
    )

    intake intake(
        plenum_volume: 6.0 * units.L,
        plenum_cross_section_area: 15.0 * units.cm2,
        intake_flow_rate: k_carb(800.0),
        idle_flow_rate: k_carb(0.001),
        idle_throttle_plate_position: 0.9967,
        throttle_gamma: 1.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(2000.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(333.0),
        velocity_decay: 0.5, //0.5
        volume: 50.0 * units.L
    )

    exhaust_system exhaust0(es_params, audio_volume: 1.0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params, audio_volume: 0.8, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: 90 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
	
	cylinder_bank b1(bank_params, angle: -90 * units.deg)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6
        )
		
    engine
        .add_cylinder_bank(b0)
		.add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    porsche_camshaft_builder camshaft(
		lobe_profile: porsche_lobe_profile_int(),
		ex_lobe_profile: porsche_lobe_profile_exh()
	)

    b0.set_cylinder_head (
        m64_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
	
	b1.set_cylinder_head (
        m64_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
			flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 15 * units.deg)
        .add_sample(1000 * units.rpm, 25 * units.deg)
        .add_sample(2000 * units.rpm, 35 * units.deg)
        .add_sample(3000 * units.rpm, 40 * units.deg)
        .add_sample(4000 * units.rpm, 42 * units.deg)
        .add_sample(5000 * units.rpm, 40 * units.deg)
        .add_sample(6000 * units.rpm, 39 * units.deg)
        .add_sample(7000 * units.rpm, 38 * units.deg)

    engine.add_ignition_module(
        porsche_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 6700 * units.rpm)
    )
}
