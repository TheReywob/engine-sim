import "engine_sim.mr"
import "../part-library/part_library.mr"

units units()
constants constants()

// THIS FILE WAS MADE TO LIVE IN assets/engines DIRECTLY
// IF YOU PLACE IT ANYWHERE ELSE, YOU MIGHT NEED TO UPDATE
// THE IMPORTS AND SOUND PATHS

label rot360(360 * units.deg)
label cycle(2 * rot360)
label rot120(cycle / 6)
label rot60(rot360 / 6)
label rot30(rot60 / 2)

// 142536

public node v6_camshaft {
    input lobe_profile: stock_454_intake_lobe_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 114.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.5 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
	output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

	// Left bank
    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + 0 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + 0 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot120)
	
	// Right bank
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 1 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot120)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot120)
}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

public node v6_ign {
    input wires;
    input timing_curve;
    input rev_limit: 7500 * units.rpm;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit)
            .connect_wire(wires.wire1, 0 * rot120)
            .connect_wire(wires.wire2, 2 * rot120)
            .connect_wire(wires.wire3, 4 * rot120)
            .connect_wire(wires.wire4, 1 * rot120)
            .connect_wire(wires.wire5, 3 * rot120)
            .connect_wire(wires.wire6, 5 * rot120);
}

public node v6 {
    alias output __out: engine;

    wires wires()

    engine engine(
        name: "generic v6",
        starter_torque: 200 * units.lb_ft,
		starter_speed: 500 * units.rpm,
        redline: 7500 * units.rpm,
        fuel: fuel(
            max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.2,
            max_burning_efficiency: 0.85)
    )

    crankshaft c0(
        throw: (86.4 / 2) * units.mm,
        flywheel_mass: 29 * 2 * units.lb,
        mass: 40 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 2,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg
    )

    rod_journal rj1(angle: 0 * rot120 - rot30)
	rod_journal rj2(angle: 2 * rot120 - rot30)
	rod_journal rj3(angle: 4 * rot120 - rot30)
	rod_journal rj4(angle: 1 * rot120 + rot30)
	rod_journal rj5(angle: 3 * rot120 + rot30)
	rod_journal rj6(angle: 5 * rot120 + rot30)

    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)

    piston_parameters piston_params(
        mass: 880 * units.g,
        blowby: 0,
        compression_height: 32.8 * units.mm,
        wrist_pin_position: 0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 610.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 144 * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: 81 * units.mm,
        deck_height: 220 * units.mm
    )

    chevy_bbc_stock_intake intake(
        carburetor_cfm: 650.0,
        idle_flow_rate_cfm: 0.007,
        idle_throttle_plate_position: 0.980,
        throttle_gamma: 1.5
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(550.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(90.0),
        velocity_decay: 1.0, //0.5
        volume: 50.0 * units.L
    )

    impulse_response ir0(filename: "../sound-library/smooth/smooth_39.wav", volume: 0.001)
    impulse_response ir1(filename: "../sound-library/smooth/smooth_39.wav", volume: 0.01)

    exhaust_system exhaust0(es_params, audio_volume: 1.0, impulse_response: ir0)
    exhaust_system exhaust1(es_params, audio_volume: 1.0, impulse_response: ir1)

    cylinder_bank b0(bank_params, angle: -30 * units.deg)
    cylinder_bank b1(bank_params, angle: 30 * units.deg)
	
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.2)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.6)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.6)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
		
	b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5
        )
		.add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.4)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire6
        )

    engine.add_cylinder_bank(b0)
    engine.add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

	harmonic_cam_lobe lobe(
		duration_at_50_thou: 205 * units.deg,
		gamma: 0.8,
		lift: 9.5 * units.mm,
		steps: 100
	)

    v6_camshaft camshaft(
		advance: 0,
		intake_lobe_profile: lobe,
		exhaust_lobe_profile: lobe,
		intake_lobe_center: 108 * units.deg,
		exhaust_lobe_center: 113 * units.deg
	)

    b0.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 44.7 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
	
	b1.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 44.7 * units.cc,
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 20 * units.deg)
        .add_sample(1000 * units.rpm, 25 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 35 * units.deg)
        .add_sample(4000 * units.rpm, 40 * units.deg)
        .add_sample(5000 * units.rpm, 45 * units.deg)
        .add_sample(6000 * units.rpm, 50 * units.deg)

    engine.add_ignition_module(
        v6_ign(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7500 * units.rpm
        )
    )
}
